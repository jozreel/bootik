var http = require('http');
var util = require("util");
var url = require('url');
var path = require('path');
//var os= require('os');
var simple = require('simple');
var simple_js =function()
{
	this.server = this.create();
	this.reqs =null;
	this.resp=null;
	this.loadable =new  Array();
	return this;
}
simple_js.prototype.create =function(){
var nreqs;
var nresps;
var obj = this;
var server =http.createServer(function(req, res)
	{ 
		
		
		
		var uril = req.url;
		var urlparts = url.parse(uril,true);
		var stfy = util.inspect(urlparts);
		var nn = util.inspect(urlparts.query);
		var tt="";
		var ct = '';
	     tt = urlparts.pathname.slice(1);
		if(tt.slice(-1) === '/')
		{
			tt=tt.slice(0,-1);
		}
		var pthnm =tt.split('/');
		var ctrl = pthnm[0];
		var pth = ctrl;
		var ctr;
		var reslv;
		obj.loadtoreq(req, res, obj);
		nreqs= req;
		nresps=res;
		if(pthnm.length !=1 && pthnm[0] !='faveicon.ico')
		{
		try{
		reslv = require.resolve('../application/controller/'+ctrl);	
		
		var ext = path.extname(reslv);
		var fn = path.basename(reslv.slice(0,-ext.length));
		ctr = require('../application/controller/'+fn);
		
		if(reslv !==undefined)
		{
	    // console.log(reslv);
		 pthnm.shift();
		 
		
		 if(ctr[pthnm[0]]!==undefined)
		  {
		   obj.reqContent(pthnm,ctr,req, res);
		  }
		  else{
			  
			  obj.loadStatic(pthnm.join('/'),function(err, data)
						{
							obj.stic(res,req,err,data,pthnm.join('/'));
						});
		  }
		  
		 
		}
		else{
			console.log('udef');
		}
		}
		catch(e)
			{
				
				if(reslv===undefined)
				{
	
					obj.loadStatic(req.url,function(err, data)
						{
							
							obj.stic(res,req, err,data,pthnm.join('/'));
						});
				}
			}
		}
		else if(pthnm[0] !== '')
		{
			
			var config = require('simple').config;
			try{
		   reslv = require.resolve('../application/controller/'+pthnm[0]);
		   if(reslv !== undefined)
		   {
		    var ext = path.extname(reslv);
		    var fn = path.basename(reslv.slice(0,-ext.length));
			console.log(fn);
		    ctr = require('../application/controller/'+fn);
		    if(ctr !== undefined)
		    {
				pthnm = [config.defaultpage];
				
			    obj.reqContent(pthnm,ctr,req, res)
		    }	
		   }
		   else
		   {
			   res.end("NOT FOUND");
		   }
			}
			catch(error)
			{  
				res.writeHead('content-type','text/plain')
				res.write(error.toString());
				res.end('Not Found');
			}
		}
	    else if(req.url == '/')
		{
	    try{
	    var config = require('simple').config;
		try{
			
		reslv = require.resolve('../application/controller/'+config.defaultcontroler);	
		if(reslv !== undefined)
		{
			
		var ext = path.extname(reslv);
		var fn = path.basename(reslv.slice(0,-ext.length));
		//console.log(fn);
		ctr = require('../application/controller/'+fn);
		//console.log(ctr);
		if(ctr !== undefined)
		{
			   pthnm = [config.defaultpage];
				
			   obj.reqContent(pthnm,ctr,req, res)
			//ctr[config.defaultpage];
		}
		}
		else
		{
			res.end("NOT FOUND");
		}
		}
		catch(error)
		{
			res.end("NOT FOUND");
		}
		}
		catch(error)
		{
			console.log(error);
		}
		}
		else
		{   
			res.end('404 NOT FOUND')
		}
	        	
	});
 this.reqs = nreqs;
 this.resp=nresps;
 return server;
} 

simple_js.prototype.reqContent = function(pthnm ,ctr, req,res)
{
	 var obj=this;
     var methd =pthnm[0]; 
	 ctr.create(res, req);
	 pthnm.shift();
	 var qs = require('querystring');
	if(req.method==='POST')
	{  
		 var body = '';
		var ob ='';
		var ar =[];
		req.on('data', function(data)
		{
	     body+=data;
		  if(body.length > 1e6) {
                body = "";
                res.writeHead(413, {'Content-Type': 'text/plain'});
				res.end();
                req.connection.destroy();}
		});
		req.on('end', function() {
			if(req.headers['content-type'].search('multipart/form-data') !== -1)
			{
				var boundry =req.headers['content-type'].split(';');
				var sep = "";
				for(var b in boundry)
				{
					if(boundry[b].search('boundary') !== -1)
					{//console.log(boundry[b]);
						var arr =boundry[b].split('=');
						sep = arr[1].trim();
					}
				}
				
				req.postdata = obj.parse_multipart(body, sep);
			}
			else{
			  if(body.slice(0,1) ==='{' && body.slice(-1) ==='}')
			  {
				
				req.postdata = JSON.parse(body); 
			  }
			  else
			  {
	           req.postdata = qs.parse(body);
			  }
			}
		    ctr[methd].apply(ctr,pthnm);
		
        });
	}
	else
       ctr[methd].apply(ctr,pthnm);
		  
		
}
simple_js.prototype.parse_multipart=function(body,sep)
{    var arr = []; 
	 var str='';
	 var lastittern = 0;
	 var main=[];
	 var lastitter=false;
	for(var i=0;i < body.length;i++)
	{
		
		if(body[i] != "\n")
		{
			str+=body[i];
		}
		else
		{
			
			str = str.replace('\r',"");
			
	
			
			if(str !="")
			{
			    arr.push(str);
				str="";
			   			
			}
		  
		
			str='';
			
		}
	}

 /// var sep = arr[0];
  arr =arr.slice(1,-1);
  arr= arr.toString().split(sep);
  for(item in arr)
  {
	  var ab = (arr[item].split(','));
	  ab =ab.filter(function (n) {return  n != ''});
	  pt=ab[0].split(';');
	  var p = this.extractName(pt);	
	 var  newArr= Array();
	 newArr.push(pt[0]);
	 for(var x in p)
	 {		 
	  newArr[(p[x][0]).trim()]=p[x][1].replace(/"/g,"").trim();
	 }
	  
	  
	  main.push(newArr);
  }
// console.log(main);
return main;
}
simple_js.prototype.extractName =function(ar)
{var pecies = [];
  
	for(var it in ar)
	{ var a = ar[it].search("name")
		if(a !== -1)
		{ 
			pecies.push(ar[it].split("="));
		
		}
	}
	return pecies;
}

simple_js.prototype.listen=function(server ,port)
{
	var srv = server;
	var prt = port;
	srv  = typeof srv !== 'undefined' ?  srv : 'localhost';
	prt  = typeof prt !== 'undefined' ?  prt : 80;
	this.server.listen(prt,srv);
}
simple_js.prototype.load = function(libname ,obj)
{ 
	
	
	this.loadable.push({lib: libname, call: obj});
	return this;
	
}

simple_js.prototype.loadtoreq = function(req, resp, contxt)
{
	var lib = '';
	
	for(var lb in contxt.loadable)
	{
		var li = contxt.loadable[lb].lib;
		var lib1 =  require('../library/'+li);
	    lib = new lib1(req,resp);
		
	   var ob = contxt.loadable[lb].call;
	for(var va in ob)
	{

		lib[va] = ob[va];
	}
	req[li] = lib;
	resp[li]=lib;	
	}
	return this;
}

simple_js.prototype.loadStatic=function(fname , callback)
{
	var pt = require('path');
	var cfg = require('../config/config');
	var fs = require('fs');
	var path = cfg.publicpath + '/'+fname;
	path = pt.normalize(path);
	
	 fs.readFile(path, callback);
			  
			  
			  
			
	
}

simple_js.prototype.notfond =function(resp)
{
	resp.writeHead(404, {'Content-Type':'text/html'});
	resp.end("404 : content not found");
}

simple_js.prototype.isimage = function(fname, res,req,data)
{
    
	var imgexts= new Array('.jpg', '.gif', '.png', '.bmp', '.ico', '.jpeg');
	
	var ext = path.extname(fname);
	
	if(imgexts.indexOf(ext) !== -1)
	 {
		// console.log(ext);	  
		 if(!res.cache.cacheFile(fname))
		      res.cache.writemime(ext.slice(1),data,fname,'image');
		 return true;
	 }
	 else
	    return false;
	
}

simple_js.prototype.isfont=function(fname, res, req, data)
{
	var fonts= new Array('.ttf', '.woff','.otf','eot');
	
	var ext = path.extname(fname);
	var mime = 'font';
	if(fonts.indexOf(ext) !== -1)
	 {
		// console.log(ext);	  
		 if(!res.cache.cacheFile(fname))
		 {
			  if(ext ==='.woff')
			  {
				  mime = 'application';
				ext = '.font-woff';
			  }
			  if(ext==='.eot')
			  {  mime='application';
				  ext = '.vnd.ms-fontobject';
			  }
			  if(ext=='.otf')
			  {
				 ext = '.opentype'; 
			  }
		      res.cache.writemime(ext.slice(1),data,fname,mime);
		 }
		 return true;
	 }
	 else
	    return false;
}
 simple_js.prototype.stic=function(res,req,err,data,fname)
 {
	 try{
	     if(err)
			throw err;
	    var ext = path.extname(fname);
		if(!this.isimage(fname,res,req, data) && !this.isfont(fname,res,req, data))
		{
			if(!res.cache.cacheFile(fname))
		      res.cache.writemime(ext.slice(1),data,fname,'text');
			 
		 	//res.end(data.toString());
		}
	    }
	  catch(e)
			{

				   res.writeHead(404, {'Content-Type':'text/html'});
	               res.end("404 : content not found");
				   console.log(e);
							
			}
 }

module.exports= new simple_js()
//var fs = require('fs');
//for(var i=0; i<1; i++)
//{
// var wtr = fs.appendFileSync('myfile.txt','utf8', 'does it append \n	');
//var wtr = fs.appendFile('myfile.txt', 'does it append \n	' , function(err)
	/*{
		if(err)
		{
			throw err;
		}
		console.log('filw writen');
	});*/
//console.log("hrey");

//}
// var buf = fs.readFileSync('myfile.txt');
 //console.log(buf.toString());
 //console.log(buf.length());
 
 
 
 